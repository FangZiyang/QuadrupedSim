function [cq, ceq, cq_grad, ceq_grad] = quad_optimal_transition_constraints(...
        state, robot_state1, ...
        robot_state2, ...
        param, ...
        casadi_quad_sx_ceq_block_func, casadi_quad_sx_ceq_block_grad_func)
addpath('../CasADi')
import casadi.*
cq = []; 
cq_grad = []; 

com_pos_start = robot_state1(1:3);
com_pos_end = robot_state2(1:3);
com_ang_start = robot_state1(4:6);
com_ang_end = robot_state2(4:6);
p_e_start = quad_optimal_transition_get_foot_pos_from_state(robot_state1, param);
p_e_end = quad_optimal_transition_get_foot_pos_from_state(robot_state2, param);
F_e_start = quad_optimal_transition_get_foot_force_from_state(robot_state1, param);
F_e_end = quad_optimal_transition_get_foot_force_from_state(robot_state2, param);

num_collo_point = param.num_collo_point;
pt_idx = 1:num_collo_point;
t_list_val = (pt_idx-0.5)/num_collo_point*param.total_time;


full_state =  state;

ceq = zeros(6*param.num_collo_point,1);
for i = 1:num_collo_point
rst1 = casadi_quad_sx_ceq_block_func('t',t_list_val(i),...
                      'state', full_state,...
                      'pos_start', p_e_start,...
                      'pos_end', p_e_end,...
                      'F_start', F_e_start,...
                      'F_end', F_e_end,...
                      'com_start', com_pos_start,...
                      'com_end', com_pos_end,...
                      'com_ang_start', com_ang_start,...
                      'com_ang_end', com_ang_end);                 
ceq(1+6*(i-1):6*i) = full(rst1.ceq_block);
end
if nargout > 2
    ceq_grad = sparse(6*param.num_collo_point,param.opt_state_size);
    for i = 1:num_collo_point
        rst2 = casadi_quad_sx_ceq_block_grad_func('t',t_list_val(i),...
                          'state', full_state,...
                          'pos_start', p_e_start,...
                          'pos_end', p_e_end,...
                          'F_start', F_e_start,...
                          'F_end', F_e_end,...
                          'com_start', com_pos_start,...
                          'com_end', com_pos_end,...
                          'com_ang_start', com_ang_start,...
                          'com_ang_end', com_ang_end); 
        tmp = sparse(rst2.ceq_block_grad);    
        ceq_grad(1+6*(i-1):6*i,:) = tmp;
    end
    ceq_grad = ceq_grad';
end
end